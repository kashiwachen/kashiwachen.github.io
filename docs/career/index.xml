<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Careers on Welcome to my blog</title>
    <link>https://kashiwachen.github.io/career/</link>
    <description>Recent content in Careers on Welcome to my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021-2022</copyright><atom:link href="https://kashiwachen.github.io/career/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/advice_preventing_from_being_beat_too_hard_by_society/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/advice_preventing_from_being_beat_too_hard_by_society/</guid>
      <description>11则防社会毒打建议     社会人（工作、事业）最重要的一个素质？
要拥有强烈的目标感。要有清晰的目标，防止生活、工作于浑浑噩噩中。职场上，对于目标的定义：目标能够被拆分出步骤，并立刻行动的东西。
  混社会需要的缺点？知道有的时候不能够说实话 - 看破不说破。不要过于老实、直接。有助于人际关系。
  年轻人是否低估了人际关系与人脉资源？低自负、谦虚。与同事、上司之间的关系应是互相学习、互相尊重。职位越高，投简历的情况越少，更多依赖于：猎头、内推。一般会进行背景调查，人际关系对其影响很大。
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/coding_skill_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/coding_skill_up/</guid>
      <description>StackExchange.com上有两个贴子（贴子一，贴子二），贴子名叫“What is the single most effective thing you did to improve your programming skills?” – 对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经验排的）
和比自己聪明的能力比自己强的人工作。学习他们的代码，他们的做事方法，看一看那些人是怎么处理错误的。 总是倾听别人怎么说，无论那个的资历和职位是什么样的。 实践，实践，实践，总是不满意于一开始出来的事。 多问问自己，现在在写什么代码？为什么要这样写成这样？还有没有更好的方法？ 学习多样的技术，多多比较他们，并一定要了解各种技术的优缺点。 总是问别人问好的问题。 多回头看看走过的路，做过的事，写过的程序，感觉一他们有多烂。 多读读那些大师写的书。 不要总坐在电脑前编程序，多做做运动，多到户外走走，和非技术人多接触，向他们学习。 把你的想法说出去，看看别人怎么回应的。从别人的回应中学习。 除了这些，下面是我个人想给你的建议——
可能只能算精神，不能算方法。我以前也写过《五个方法成为更好的程序员》，《十条不错的编程观点》，还有《优秀程序员的十个习惯》这几篇文章也能给你一些启发。
热情。对编程充满热情。这种热情会导致强烈地专研精神，和努力的精神。专研精神相当重要，它是畏难情绪的天敌。 知道。学习技术要“知其道，明其理”，而不仅仅只是了解知识。举例，为什么C++有“初始化例表”而Java却没有？为什么Java的没有多重继承？为会有了TCP还要UDP？对于一个事物，什么是好的，什么是不好的。不但要了解其表面，还要了解其思想。只有了解原始的初衷和目的，你才能真正“知道”。 犯错。不犯错误永远没有经验，从自己的错误和别人的错误中学习，只有自己犯了错，才会真正明白。犯错不可怕，可怕的是不会总结只有真正的摸爬滚打过的人才是强人。技能和经验总是用错误去换来的。 回顾。要多去回顾过去，看看历史上发生过的事。这样你才能明白事物的发展规律，从面才能了解未来的路。举例：单机 -&amp;gt; Client/Server -&amp;gt; 中间应用层 -&amp;gt; 多层结构 -&amp;gt; 分布式结构。 C -&amp;gt; C++ -&amp;gt; Java，等等，等等。未来其实就在回顾过去之中。 质疑。质疑精神很重要。质疑通常会导致不同意见甚至反对意见。也许你会质疑错，也许你会被质疑，但是你的认知也会因为不同的观点而变得完整。有所同有所不同（“同”为同意及相同），观点因为不同才能迸发出火花，事物也此而发展，世界因为不同而精彩。下</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/company_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/company_list/</guid>
      <description>Company List Data Engineer  Google Amazon Scipy SmartNews Agoda Bizreach Line Rakuten IBM(Research center, Waston) FLYWHEEL(不熟悉，日本公司) Headspace  Software Engineer  Google Amazon Scipy SmartNews Agoda Bizreach Line Rakuten IBM(Research center, Waston)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/data_engineer_summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/data_engineer_summary/</guid>
      <description>Data Engineer Features In this article, I mainly summarize the duty and qualification as a Data Engineer. General data mining process in CRISP-DM模型(CRoss-Industry Standard Process for Data Mining):
 业务理解 Business Issue Understanding 数据理解 Data Understanding 数据准备 Data Preparation 分析/建模 Analysis/Modeling 模型评估 Validation 模型发布/可视化 Presentation/Visualization  [toc]
Google Data Engineer Certification A Professional Data Engineer enables data-driven decision making by collecting, transforming, and publishing data. A Data Engineer should be able to design, build, operationalize, secure, and monitor data processing systems with a particular emphasis on security and compliance; scalability and efficiency; reliability and fidelity; and flexibility and portability.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/data_related_positions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/data_related_positions/</guid>
      <description>Data related positions   Data architect Design the database system, integrate 1)data (stream&amp;amp;batch)processing, 2)maintain database
  Database Manager Maintain the database running, keep database&amp;rsquo;s accessibility
  Data Engineer: Job Description
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/freelancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/freelancer/</guid>
      <description> 自由接单的渠道来源  Upwork, Elance   信用和个人品牌的建立 从完全自由到固定远程工作的模式转换  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/google_data_engineer_exam_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/google_data_engineer_exam_guide/</guid>
      <description>Exam Guide Requirement:  Design data processing systems Build and operationalize data processing systems Operationalize machine learning models Ensure solution quality  Design data processing systems  Selecting the appropriate storage technologies. Considerations include:  Mapping storage systems to business requirements Data modeling Tradeoffs involving latency, throughput, transactions Distributed systems Schema design   Designing data pipelines. Considerations include:  Data publishing and visualization (e.g., BigQuery) Batch and streaming data (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/behavior_question/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/behavior_question/</guid>
      <description>Amazon Leadership Principle 用于准备Behavior Question，基于这些准则准备小故事。
Customer Obsession Leaders start with the customer and work backwards. They work vigorously to earn and keep customer trust. Although leaders pay attention to competitors, they obsess over customers.
Ownership Leaders are owners. They think long term and don’t sacrifice long-term value for short-term results. They act on behalf of the entire company, beyond just their own team. They never say “that’s not my job.&amp;quot;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/market_value_of_a_man/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/market_value_of_a_man/</guid>
      <description>【转职】市场价值 - 人才价值最大化  来源：clubhouse Shiyo@Linc
 要点  时刻评价自己的人才价值   能力资产。 人脉资产。（反面例子）不重视自己以前的职场人脉资产， 业界生产线。一个人在行业中平均的生产力。   业界的寿命有多长，处于哪个生命周期  寿命等级：
 没有什么人在做，业界需求大 开始有人在做，业界需求大 Routine work。可代替性很强，很多人都在做   现在工作的价值有多少  发现处于晚期，能够迅速在其他业界发挥自己的强项。
20s：能力快速增长，公司看中专业性、学习能力
30s：看中业务、管理能力
40s：看中资源（人才、业务、金融）
  如何在成长的市场发现适合自己的工作
  自己的能力能否在新的公司发挥出来
  是否喜欢这家公司的人、业务。能够兴奋得工作。
  困难都分水岭：30岁 30岁前换公司：可以Try一下。就算失败也没问题 30岁后换公司：专业性强，很困难。失败会有问题
不行的人的特征：  因为不喜欢现在的工作而换工作，遇到困难就想要换工作，逃避问题。 没有好好research：公司信息以及和新公司的人好好交流内部信息。 30岁以上，这个人交谈的时候，是否能够说出前面工作的细节。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/prepare_for_interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/prepare_for_interview/</guid>
      <description>换工作  确认自己想在下一份工作获得的经验、能力(JD)  面试(From Indeed Guide)  准备面试   Carefully examine the job description 为什么会来面试及自己的对应JD的资格/能力。明白自己为什么想要这个职位以及资格。明确说明对于这个机会/职位的兴趣及理由 研究、分析面试的公司和职位。有利于面试过程中的谈资及准备面试官的问题。充分的准备也能够让自己在面试中保持冷静。  研究职位的产品和服务   准备一些通用问题的回答：  你（的能力）可以为公司带来什么？     不要谈技术问题，将问答变成交流。 Why do you enjoy working in this company？ Emotion connection, passions 面试官想看 motivation, Learning skill  自我PR  重要内容点到为止  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/prepare_for_job_hunting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/prepare_for_job_hunting/</guid>
      <description>版权归作者所有，任何形式转载请联系作者。 作者：AliceC（来自豆瓣） 来源：https://www.douban.com/note/753659635/
 目标设定: IT大厂，或者比较成熟的start up（成立不久或小规模start up是给真正的牛人准备的，大公司反而适合新人或者实力一般的选手）。下限：薪资至少要提高。上限：多拿几家offer互相compete把自己卖个好价钱。
面试一般有三个部分：Coding/Algorithm, System Design, Behavior Question. 其中算法的比重随着工作年限的增加而减少。对于我这样2～3年经验的程序员来说,算法的比重在70%左右，也是准备工作的最大头。
准备  算法/刷题（Leetcode）：之前new grad求职的时候刷过一些，也上过某章算法班的课程, 上课对于我的最主要的作用就是对于题目的分类更加明确。这次刷题也是按照分类开始，先按类型刷经典高频题，之后再根据公司的面经针对性地刷题。  我的具体刷题方法是初期被卡住迅速去看答案（传说中的兔派），学习标准解法/思路，中后期对于见过的题型设定10～20min自己想，还是没思路或者写完有问题再去看答案。Leetcode的讨论区经常能见到非常高效简洁的解法，能学到很多东西。对于部分hard类型的题目有时候看讨论区还是不能明白的就去YouTube搜解法，youtube上有很多免费的资源，带着visiualization的解法会更容易理解。每道题我会take note,记录思路重点或者当时具体参考的哪一种解法。这样复习起来快很多。
 System Design: 这部分比较灵活，大部分系统设计的题目没有标准答案，所以工作中的积累就非常重要。基础知识可以通过上算法班课和Udemy网课获得，youtube上也有一些很好的免费资源。这部分是我的薄弱环节，准备时花的精力也比较少，后来有几场面试挂在了系统设计。也算是这次跳槽过程血(qian)的教训吧。
  Behavior Question: 这部分每家公司都会问，有些会夹在coding之后花5-10min来问，有些会专门面一轮（45-60min)。有工作经验且经过亚麻leadership principle熏陶之后，这部分对我来说最容易。结合工作经验准备几个常见问题的答案，比如most challenging problem。多面几次之后就基本上可以张口就来（捂脸）。
  时间安排: 在职跳槽最难的部分就是如何抽出大量时间来准备，战五渣如我自认资质普通，需要实打实花时间做题，也经常犯懒开小差，所以整个过程拖得很长。准备期间我基本上取消了所有的社交活动，把下班和周末的时间都安排给了刷题。6、7月工作加班赶项目进度，太累了所以这两个月完全停下来准备的进度。8月开始重启。
娱乐和鸡汤需求: 刷题进入状态其实是件很快乐和很有成就感的事情。但是长时间一直使用理工科思维会让我觉得自己变得很像机器，会觉得生活枯燥乏味，难以忍受。所以要能坚持下去适当的娱乐必不可少，这种时候我会选择不费脑的国产剧，综艺，喜剧，vlog博主，游戏等等来调节状态，保持续航。刷题受挫怀疑人生的时候去一亩三分地看看励志帖打一剂鸡血也是必要的。刷题的环境变化也有助于保持心情良好，楼下有几家不错的咖啡馆，在背景略嘈杂的环境我反而更容易集中注意力。总之要用各种方法让自己心情尽量好和觉得舒服，这样效率会高。
面试安排 准备工作: 一份最新的简历。一个跳槽理由（绝对不要说上一份工作的缺点）。
如何得到面试机会: 在职跳槽比new grad找工作最大的优势在于得到面试机会要容易太多。
 LinkedIn HR: Linkedin profile页面里有一个按钮是表示open to new job opportunity. 你点开按钮以后之后HR能看到这个状态（刚刚上去找发现找不到这个按钮了，不知道是我没找到还是linkedIn改了feature）有兴趣的HR会主动来找你。这个功能对于在职跳槽来说实在是太省事太好用，我70%的面试机会来自HR。 内推：对于有兴趣的公司可以找朋友/朋友的朋友 或者在一亩三分地上找人内推。优点是效率高，如果成功朋友能拿bonus。 海投：有兴趣但没有熟人，懒得找内推。个人海投的经验比较少，只投了一两家但也都回复很快，基本上隔天HR就会回邮件过来。  基本面试流程: HR聊天 &amp;ndash;&amp;gt; phone interview(一轮算法（45-60min)，有些公司表现一般会加面一轮) &amp;ndash;&amp;gt; onsite(4~5轮，每轮45~60min)
不同公司间的时间安排: 首先可以挑几家不是特别想去的公司练手，熟悉面试流程，让自己进入状态，也可以顺便了解下这家公司，说不准有意外的惊喜。不同公司从电话面试开始到最终出offer的时间不大相同，如果安排紧凑最快可以1～2周，一般来说是3周到1个月左右属于正常。有些公司面试周期极长（比如Google，由于有team match，整个周期最快3周，最慢可以拖好几个月）。最理想的情况就是把想要去的目标公司的出结果时间安排到同一个时间段，这样如果拿到多个offer可以互相compete。所以面试流程慢的公司可以先开始。也可以跟HR协商具体的面试时间，比如有些电面可以早点进行，然后再等到其他家也到类似的进度再去onsite。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/thinking_before_interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/thinking_before_interview/</guid>
      <description>What&amp;rsquo;s your target for next job?   下一个公司： 优秀的公司的类似的岗位，确定工资、能力需求
  下一个国家： 哪个国家都不知道
  下一个目标： 跳槽跳槽跳槽
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/thinking_in_work/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/thinking_in_work/</guid>
      <description>How to enjoy the work  Keep the interest in work. When I get bored, this means I am not thinking to learn new things. Know enough for what I am doing. Working with chaos makes me confused with what I am doing, which makes it hard to work and makes me not willing to work.  How to learn effectively during work  Hold a purpose during learning.  How to work effectively &amp;ndash;&amp;gt; keep productive 69工作术  Set a time table to reduce the time of making decision and push me doing the task List the tasks for tomorrow.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kashiwachen.github.io/career/interview/tricks_on_job_description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kashiwachen.github.io/career/interview/tricks_on_job_description/</guid>
      <description>Necessary Information on LinkedIn Key words:
 Get To Know Our Team Opportunity  What you can get from the key words above:
   </description>
    </item>
    
  </channel>
</rss>
