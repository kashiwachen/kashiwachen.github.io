<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech_knowledges on Welcome to my blog</title><link>https://kashiwachen.github.io/tech_knowledge/</link><description>Recent content in Tech_knowledges on Welcome to my blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2021-2022</copyright><atom:link href="https://kashiwachen.github.io/tech_knowledge/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://kashiwachen.github.io/tech_knowledge/airflow_knowledge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/airflow_knowledge/</guid><description>Airflow Basic concept DAGs: 1) Sensor 2) Operator Main components Scheduler plans the execution of jobs based on a trigger or schedule. Work queue is used by Scheduler to deliver tasks that need to be run to the Workers. Worker(ECRs) executes the operation defined in each DAG. Usually, a Worker pull its task from Work queue when it is ready to process a task. When it completes the execution of the task, it will attempt to process more work from the Work queue until no task exists.</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/commit/</guid><description>Usually, a simple commit includes 2 parts:
{Type}: {Body}
Type:
feat: Add new features fix: Fix bugs docs: Edit documentation style: Edit the style, no effect on code refactor: Just refactor, no new feature and bug fixing test: Add unit test code core: Update the core settings, like packages or some settings pref: Improve the performance Body: The detail information of the commit</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/data_lake_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/data_lake_structure/</guid><description>Data Lake Structure Data Lake features 数据接入: Store data Create meta info for the data file Provide a method to access the data. For instance, API or port(?). Data storage Data search Data management: Create meta info Create tag of data(?) and classify the data. Create data index(?) Create relation between different types of data Track the timeline of data(?) Data quality Validate the completeness of data Monitor the data process procedure &amp;ndash;&amp;gt; Apache Airflow / Zabbix Safety monitor: Monitor the usage of data, knowing the user and usage(what operation has been done), and hide sensitive info in data.</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/data_lake_vs_data_warehouse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/data_lake_vs_data_warehouse/</guid><description>Data Lake vs Data Warehouse Features Data Lake Data Warehouse data structure raw processed purpose Not yet determined For specific usage User Data scienctist Business professionals Accessibility Highly accessible and quick to update More complicateds and costly to make changes Data Lake Structure A data lake is a repository of information in its “raw” format, meaning the format in which it existed when it was first collected and added to the storage pool.</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/database_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/database_structure/</guid><description>数据库架构 如何设计数据库，使用什么类型的数据库，就是一个架构师必须了解的。所有的数据库的共同点都是以某种方式存储数据，以某种接口来访问存储的数据。
常用概念 水平分割（横打散） 垂直分割（列打散） 按照某一列数据的特性（时间）去分割表格。 垂直、水平分割结合运用 架构模式 在实际项目中，很多人会把架构模式跟架构概念混为一谈，实际上他们是两个东西。 数据库架构主要分为2种：
单库+缓存设计
多库设计之主从读写分离。 多库架构中，又有两种比较流行的数据存储方式：集群数据库、分布式数据库。
单库与多库的优缺点 若按架构进行开发，架构越长远，那么开发周期内需要考虑的东西越多，且初期数据量并不能够达到该架构要的负载瓶颈。 在IT创业界有句话，叫三月一版本，三年一重构，而一次重构的架构设计，就应该是考虑到三年后的数据量，还有负载、抗压能力。他人经验：单库+缓存的数据库设计也完全能够轻轻松松做到百万级，乃至于千万级的数据抗压。
架构中的注意事项 模块切割 分析常用字段 应完全避免为空设计（免NULL） 尽可能将字段定义为NOT NULL。MySQL难以优化使用了可空列的查询，它会使索引、索引统计和值更加复杂。 在表中存储可为空的字段，也是有办法不使用NULL的，可以考虑使用0，特殊值或字符串来代替它。 不同类型的数据库架构 关系型数据库 关系型数据库以数据表Table为核心来存储数据。数据是一行一行的表记录Record。表之间通过关联关系相互关联。 关系模型是表(行，列)组成的二维结构。SQL是关系型数据库的统一查询接口。
关系型数据库的架构设计，主要是要解决存储和事务。存储是要解决数据的查询问题。而事务则包含了四个特性，A（原子性）C（一致性）I（隔离性）D（持久性）。
Ref: MySql什么是数据库架构设计
谈谈数据库架构</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/deployment/</guid><description>Basics about the deployment UAT(User Acceptance Testing) Before releasing an application, there is always one last test &amp;ndash; UAT(User Acceptance Testing), which is also called &amp;ldquo;end-user testing&amp;rdquo; or &amp;ldquo;final testing&amp;rdquo;.</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/devops_vs_sre/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/devops_vs_sre/</guid><description>DevOps vs. SRE DevOps 减少组织间的谷仓效应 接受失效，使其为开发周期中的元素 逐渐改变 善于使用工具和自动化 任何事皆可被量化 SRE 开发周期中，开发团队使用相同的工具以及一起分享所有权 对于新的版本，建立一套可以量化的指标去衡量“意外”和“失效” 鼓励团队透过降低排除故障的成本来达到快速交付的目的（逐渐改变） 鼓励团队把工作自动化，把精力放在中长期的系统改善 运维仍属于工程的范畴，规范可用性、运行时间、停机时间。</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/github_tricks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/github_tricks/</guid><description>GitHub Command git rebase [branch name] Solve the merge problem before merging the branch to an updated main branch git fetch origin []:[] Commit</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/h3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/h3/</guid><description>H3: A geospatial indexing system(or grid system) What is geocoding? The format of H3 Resolution Size Merit complete documentation
functions for radius query (Uber expert)
fast speed (2.6ms per iteration)
enough functions for geospatial analysis
Hexagon shape
TODO: Finish the article.</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/micro_service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/micro_service/</guid><description>Micro Service Micro service is trying to divide a large service framework into smaller services.
asdasd
asdasd
Reference The framework of micro services The connection among services</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/multi-tenant-database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/multi-tenant-database/</guid><description>Multi-tenant DB Everyone is always talking about developing a SaaS app. The basis for SaaS is a Multi-tenancy architecture that allows multiple tenants (organizations) access to multiple instances of the software hosted on a single server. The tenants of the software share the server resources and memory.
Designing a database structure that can accommodate this type of design depends on several factors among them:
● Security
● Client data isolation</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/solid_knowledge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/solid_knowledge/</guid><description>S.O.L.I.D S: Single responsibility principle. A class has and can have only one factor that makes it change, meaning that a class should have only a single responsibility. O: Open-close principle. Objects or entities should be open for extension but closed for modification. L: Liskov Substitution Principle. I: Interface Segregation Principle. D: Dependency Inversion Principle. REF: SOLID EN SOLID CN</description></item><item><title/><link>https://kashiwachen.github.io/tech_knowledge/web_service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kashiwachen.github.io/tech_knowledge/web_service/</guid><description>Web Service SaaS &amp;ndash;&amp;gt; Software as a Service, which is one of the most popular topics among IT companies. For instance, cloud service, Office 365.
API &amp;amp; SDK</description></item></channel></rss>