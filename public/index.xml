<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to my blog</title>
    <link>http://example.org/</link>
    <description>Recent content on Welcome to my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021-2022</copyright><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/posts/book_listening/%E7%86%B1%E6%83%85%E4%BA%BA%E7%94%9F%E7%9A%84%E5%86%B0%E6%B7%87%E6%B7%8B%E5%93%B2%E5%AD%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/book_listening/%E7%86%B1%E6%83%85%E4%BA%BA%E7%94%9F%E7%9A%84%E5%86%B0%E6%B7%87%E6%B7%8B%E5%93%B2%E5%AD%B8/</guid>
      <description>熱情人生的冰淇淋哲學  斜槓人如何抵制社會惡習（工作、面試）。斜槓人：擁有許多興趣，興趣的廣度比深度重要；無法在一個領域深度鑽研，達到一定程度即會跳的另外一個領域；討厭規矩太多的組織、團隊。
在應徵過程中，容易收到懷疑。為了處理這種懷疑，可以通過更改履歷以及面試的方式來應對。
 問題及解決方法 經歷多元化  工作經驗沒有主軸 頻繁更換工作，缺乏穩定性 大學科系與職務不符合  解決方法 &amp;mdash; 更改履歷 / 面試方式  找出公分母。列出過去的工作經驗以及所要求的技能及特質；再列出應徵工作所需要的條件；將條件一一連結     職務 技能/特質     Chatting Cafe 部長 與人淺顯交流     找出隱藏條件。除了技術上的要求，找出其他未列出的要求（溝通、簡報能力等） 多元或單一不是重點。強調熱情如何提高工作績效。  難以選擇熱情的傾灑點 無法確認自己想把熱情放在某一方面。
解決方法 &amp;mdash; 四色冰淇淋、五大價值觀 需要找出能夠讓自己開始行動的動力。
 5大價值觀。找出五個最重視的價值觀。日常習慣 &amp;ndash;&amp;gt; 找出事件的出發點 &amp;ndash;&amp;gt; 重視的價值觀。如，健康、家庭、身心平衡、挑戰etc。 根據價值觀選擇4種興趣、習慣（可隨時更換，直到組合讓人滿意）。如，重視安全感、家庭、金錢 &amp;ndash;&amp;gt; 1)穩定收入 2)孩子互動 3)研究投資及副業 4)打給父母。 熱情時間。將興趣安排至行事曆。1）每週固定安排2-4小時 2）即時按照心情及情況決定時間內做的工作  工作不再成為認同感的來源 需要工作支持生活開支，但工作消耗了大部分精力，無法讓我們集中到興趣上。
解決方法 &amp;mdash; 讓工作成為助力  獨自進行的熱情活動 + 他人合作的日間工作。 一個人無法長時間獨處，需要通過交流來互補精神上的短缺。 讓工作不但能支持生活開支，其所帶來的附加效應能進一步支持熱情。 生活 - 工作的平衡  最終達成：身份認同（社會認同）不再來自於工作，因為明白工作只是助長熱情發展。並且，還能放寬心看待工作中的不順心。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/book_listening/%E7%AA%AE%E6%9F%A5%E7%90%86%E7%9A%84%E6%99%AE%E9%80%9A%E5%B8%B8%E8%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/book_listening/%E7%AA%AE%E6%9F%A5%E7%90%86%E7%9A%84%E6%99%AE%E9%80%9A%E5%B8%B8%E8%AD%98/</guid>
      <description>窮查理的普通常識  作者：查理 蒙格 （沒有蒙格就沒有股神）
想要擁有什麼，就讓自己配得上它。
 背景：於律師事務所工作，29歲陷入人生低谷：離婚、喪子。
投資常識   投資擁有護城河的企業。如，Apple：完整的科技生態鏈，讓人難以割捨。 在生活中運用護城河概念。如，拉開自己於他人的價值差距 &amp;ndash;&amp;gt; 通過分享自己的作品、技術教學來建立自我品牌。
  選擇股價合理的優質企業。找尋股價被低估的中小企業 &amp;ndash;&amp;gt; 找尋具備更好發展潛能的大企業。
  減少選擇的次數。設定20-30個欄位作為一生的出手次數，每次在股市出手，就劃掉一個欄位，這樣子在出手前，我們會縝密分析後才出手。 一次性決定一週需要做的事，之後再精修細節；把最要的決定留在頭腦清楚的時候；避免因事件緊迫或情緒因素影響決策品質。
  能力圈。確保自己站在能力圈中央，避免跳出能力圈。如，股神將投資分為：可以投資、不能投資、無法理解。將事情的發展把握在手中。
  生活常識  列出底線，總是要想到什麼不該做。先思考不想要什麼，再想要追求什麼。“如果知道我會死在哪裡，那我將永遠不去那個地方”。別吸毒、別亂闖馬路、別染上愛滋。 在找下一分工作時，我們最會先列出要求：薪水高、工作性質單純。但是不會定下底線：哪些企業不會去？（內鬥、糾紛、） 檢查清單。通過清單明白該做什麼、不該做什麼，從而集中思考當下避免情緒干擾。減少主觀因素帶來的失誤。 閱讀。通過閱讀刪除舊觀念，增加新觀念，跟上時代。 建立自己的道德觀 &amp;ndash; 底線。  多元思考模型  只將注意力放在同一個學科，不管多麼有趣，也會把人思想禁錮在狹窄的領域當中。
&amp;mdash; William Osler
   應用數學、工程學。通過變數改變生活習慣，X（高熱量食物） + Y（騎機車出行） + Z（不小心買飲料） = A（發福），通過一步步更改變量來更改習慣，避免劇烈的改變。
  應用腦科學。大腦會不自覺根據自己的感覺增加內容。學會從對話中尋找客觀事實。
  誤判心理學。會害你失敗的都是好點子而不是壞點子。？？？？ 1）一致性的偏誤。
2）獎勵機制。提升效率。
  試著將生活情況用所知道的工具去分析, 就可以培養起多元思考模型。但是人類非常習慣用熟悉的思考方式來思考。可以結合《刻意練習》來培養多元思考方式。
MEMO 股神老師、價值投資之父 &amp;ndash; 班傑明 葛拉漢（Benjamin Graham）</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/advice_preventing_from_being_beat_too_hard_by_society/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/advice_preventing_from_being_beat_too_hard_by_society/</guid>
      <description>11则防社会毒打建议     社会人（工作、事业）最重要的一个素质？
要拥有强烈的目标感。要有清晰的目标，防止生活、工作于浑浑噩噩中。职场上，对于目标的定义：目标能够被拆分出步骤，并立刻行动的东西。
  混社会需要的缺点？知道有的时候不能够说实话 - 看破不说破。不要过于老实、直接。有助于人际关系。
  年轻人是否低估了人际关系与人脉资源？低自负、谦虚。与同事、上司之间的关系应是互相学习、互相尊重。职位越高，投简历的情况越少，更多依赖于：猎头、内推。一般会进行背景调查，人际关系对其影响很大。
  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/company_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/company_list/</guid>
      <description>Company List Data Engineer  Google Amazon Scipy SmartNews Agoda Bizreach Line Rakuten IBM(Research center, Waston) FLYWHEEL(不熟悉，日本公司) Headspace  Software Engineer  Google Amazon Scipy SmartNews Agoda Bizreach Line Rakuten IBM(Research center, Waston)  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/data_engineer_summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/data_engineer_summary/</guid>
      <description>Data Engineer Features In this article, I mainly summarize the duty and qualification as a Data Engineer. General data mining process in CRISP-DM模型(CRoss-Industry Standard Process for Data Mining):
 业务理解 Business Issue Understanding 数据理解 Data Understanding 数据准备 Data Preparation 分析/建模 Analysis/Modeling 模型评估 Validation 模型发布/可视化 Presentation/Visualization  [toc]
Google Data Engineer Certification A Professional Data Engineer enables data-driven decision making by collecting, transforming, and publishing data. A Data Engineer should be able to design, build, operationalize, secure, and monitor data processing systems with a particular emphasis on security and compliance; scalability and efficiency; reliability and fidelity; and flexibility and portability.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/data_related_positions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/data_related_positions/</guid>
      <description>Data related positions   Data architect Design the database system, integrate 1)data (stream&amp;amp;batch)processing, 2)maintain database
  Database Manager Maintain the database running, keep database&amp;rsquo;s accessibility
  Data Engineer: Job Description
  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/google_data_engineer_exam_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/google_data_engineer_exam_guide/</guid>
      <description>Exam Guide Requirement:  Design data processing systems Build and operationalize data processing systems Operationalize machine learning models Ensure solution quality  Design data processing systems  Selecting the appropriate storage technologies. Considerations include:  Mapping storage systems to business requirements Data modeling Tradeoffs involving latency, throughput, transactions Distributed systems Schema design   Designing data pipelines. Considerations include:  Data publishing and visualization (e.g., BigQuery) Batch and streaming data (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/behavior_question/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/behavior_question/</guid>
      <description>Amazon Leadership Principle 用于准备Behavior Question，基于这些准则准备小故事。
Customer Obsession Leaders start with the customer and work backwards. They work vigorously to earn and keep customer trust. Although leaders pay attention to competitors, they obsess over customers.
Ownership Leaders are owners. They think long term and don’t sacrifice long-term value for short-term results. They act on behalf of the entire company, beyond just their own team. They never say “that’s not my job.&amp;quot;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/market_value_of_a_man/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/market_value_of_a_man/</guid>
      <description>【转职】市场价值 - 人才价值最大化  来源：clubhouse Shiyo@Linc
 要点  时刻评价自己的人才价值   能力资产。 人脉资产。（反面例子）不重视自己以前的职场人脉资产， 业界生产线。一个人在行业中平均的生产力。   业界的寿命有多长，处于哪个生命周期  寿命等级：
 没有什么人在做，业界需求大 开始有人在做，业界需求大 Routine work。可代替性很强，很多人都在做   现在工作的价值有多少  发现处于晚期，能够迅速在其他业界发挥自己的强项。
20s：能力快速增长，公司看中专业性、学习能力
30s：看中业务、管理能力
40s：看中资源（人才、业务、金融）
  如何在成长的市场发现适合自己的工作
  自己的能力能否在新的公司发挥出来
  是否喜欢这家公司的人、业务。能够兴奋得工作。
  困难都分水岭：30岁 30岁前换公司：可以Try一下。就算失败也没问题 30岁后换公司：专业性强，很困难。失败会有问题
不行的人的特征：  因为不喜欢现在的工作而换工作，遇到困难就想要换工作，逃避问题。 没有好好research：公司信息以及和新公司的人好好交流内部信息。 30岁以上，这个人交谈的时候，是否能够说出前面工作的细节。  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/prepare_for_interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/prepare_for_interview/</guid>
      <description>换工作  确认自己想在下一份工作获得的经验、能力(JD)  面试(From Indeed Guide)  准备面试   Carefully examine the job description 为什么会来面试及自己的对应JD的资格/能力。明白自己为什么想要这个职位以及资格。明确说明对于这个机会/职位的兴趣及理由 研究、分析面试的公司和职位。有利于面试过程中的谈资及准备面试官的问题。充分的准备也能够让自己在面试中保持冷静。  研究职位的产品和服务   准备一些通用问题的回答：  你（的能力）可以为公司带来什么？     不要谈技术问题，将问答变成交流。 Why do you enjoy working in this company？ Emotion connection, passions 面试官想看 motivation, Learning skill  自我PR  重要内容点到为止  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/prepare_for_job_hunting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/prepare_for_job_hunting/</guid>
      <description>版权归作者所有，任何形式转载请联系作者。 作者：AliceC（来自豆瓣） 来源：https://www.douban.com/note/753659635/
 目标设定: IT大厂，或者比较成熟的start up（成立不久或小规模start up是给真正的牛人准备的，大公司反而适合新人或者实力一般的选手）。下限：薪资至少要提高。上限：多拿几家offer互相compete把自己卖个好价钱。
面试一般有三个部分：Coding/Algorithm, System Design, Behavior Question. 其中算法的比重随着工作年限的增加而减少。对于我这样2～3年经验的程序员来说,算法的比重在70%左右，也是准备工作的最大头。
准备  算法/刷题（Leetcode）：之前new grad求职的时候刷过一些，也上过某章算法班的课程, 上课对于我的最主要的作用就是对于题目的分类更加明确。这次刷题也是按照分类开始，先按类型刷经典高频题，之后再根据公司的面经针对性地刷题。  我的具体刷题方法是初期被卡住迅速去看答案（传说中的兔派），学习标准解法/思路，中后期对于见过的题型设定10～20min自己想，还是没思路或者写完有问题再去看答案。Leetcode的讨论区经常能见到非常高效简洁的解法，能学到很多东西。对于部分hard类型的题目有时候看讨论区还是不能明白的就去YouTube搜解法，youtube上有很多免费的资源，带着visiualization的解法会更容易理解。每道题我会take note,记录思路重点或者当时具体参考的哪一种解法。这样复习起来快很多。
 System Design: 这部分比较灵活，大部分系统设计的题目没有标准答案，所以工作中的积累就非常重要。基础知识可以通过上算法班课和Udemy网课获得，youtube上也有一些很好的免费资源。这部分是我的薄弱环节，准备时花的精力也比较少，后来有几场面试挂在了系统设计。也算是这次跳槽过程血(qian)的教训吧。
  Behavior Question: 这部分每家公司都会问，有些会夹在coding之后花5-10min来问，有些会专门面一轮（45-60min)。有工作经验且经过亚麻leadership principle熏陶之后，这部分对我来说最容易。结合工作经验准备几个常见问题的答案，比如most challenging problem。多面几次之后就基本上可以张口就来（捂脸）。
  时间安排: 在职跳槽最难的部分就是如何抽出大量时间来准备，战五渣如我自认资质普通，需要实打实花时间做题，也经常犯懒开小差，所以整个过程拖得很长。准备期间我基本上取消了所有的社交活动，把下班和周末的时间都安排给了刷题。6、7月工作加班赶项目进度，太累了所以这两个月完全停下来准备的进度。8月开始重启。
娱乐和鸡汤需求: 刷题进入状态其实是件很快乐和很有成就感的事情。但是长时间一直使用理工科思维会让我觉得自己变得很像机器，会觉得生活枯燥乏味，难以忍受。所以要能坚持下去适当的娱乐必不可少，这种时候我会选择不费脑的国产剧，综艺，喜剧，vlog博主，游戏等等来调节状态，保持续航。刷题受挫怀疑人生的时候去一亩三分地看看励志帖打一剂鸡血也是必要的。刷题的环境变化也有助于保持心情良好，楼下有几家不错的咖啡馆，在背景略嘈杂的环境我反而更容易集中注意力。总之要用各种方法让自己心情尽量好和觉得舒服，这样效率会高。
面试安排 准备工作: 一份最新的简历。一个跳槽理由（绝对不要说上一份工作的缺点）。
如何得到面试机会: 在职跳槽比new grad找工作最大的优势在于得到面试机会要容易太多。
 LinkedIn HR: Linkedin profile页面里有一个按钮是表示open to new job opportunity. 你点开按钮以后之后HR能看到这个状态（刚刚上去找发现找不到这个按钮了，不知道是我没找到还是linkedIn改了feature）有兴趣的HR会主动来找你。这个功能对于在职跳槽来说实在是太省事太好用，我70%的面试机会来自HR。 内推：对于有兴趣的公司可以找朋友/朋友的朋友 或者在一亩三分地上找人内推。优点是效率高，如果成功朋友能拿bonus。 海投：有兴趣但没有熟人，懒得找内推。个人海投的经验比较少，只投了一两家但也都回复很快，基本上隔天HR就会回邮件过来。  基本面试流程: HR聊天 &amp;ndash;&amp;gt; phone interview(一轮算法（45-60min)，有些公司表现一般会加面一轮) &amp;ndash;&amp;gt; onsite(4~5轮，每轮45~60min)
不同公司间的时间安排: 首先可以挑几家不是特别想去的公司练手，熟悉面试流程，让自己进入状态，也可以顺便了解下这家公司，说不准有意外的惊喜。不同公司从电话面试开始到最终出offer的时间不大相同，如果安排紧凑最快可以1～2周，一般来说是3周到1个月左右属于正常。有些公司面试周期极长（比如Google，由于有team match，整个周期最快3周，最慢可以拖好几个月）。最理想的情况就是把想要去的目标公司的出结果时间安排到同一个时间段，这样如果拿到多个offer可以互相compete。所以面试流程慢的公司可以先开始。也可以跟HR协商具体的面试时间，比如有些电面可以早点进行，然后再等到其他家也到类似的进度再去onsite。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/thinking_before_interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/thinking_before_interview/</guid>
      <description>What&amp;rsquo;s your target for next job?   下一个公司： 优秀的公司的类似的岗位，确定工资、能力需求
  下一个国家： 哪个国家都不知道
  下一个目标： 跳槽跳槽跳槽
  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/thinking_in_work/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/thinking_in_work/</guid>
      <description>How to enjoy the work  Keep the interest in work. When I get bored, this means I am not thinking to learn new things. Know enough for what I am doing. Working with chaos makes me confused with what I am doing, which makes it hard to work and makes me not willing to work.  How to learn effectively during work  Hold a purpose during learning.  How to work effectively &amp;ndash;&amp;gt; keep productive 69工作术  Set a time table to reduce the time of making decision and push me doing the task List the tasks for tomorrow.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/career/interview/tricks_on_job_description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/career/interview/tricks_on_job_description/</guid>
      <description>Necessary Information on LinkedIn Key words:
 Get To Know Our Team Opportunity  What you can get from the key words above:
   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/journal/2020-01-14-journal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/journal/2020-01-14-journal/</guid>
      <description>2020/1/14 木曜日  嘗試用hugo去製作部落格，仍在適應中 把修真聊天群漫畫給看完了lol。只能表示自己的確住在火星上  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/journal/2020-01-15-journal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/journal/2020-01-15-journal/</guid>
      <description>2020/1/15 金曜日   Searching on ideas around API business: 1) more functions; 2) how to be attractive
  Find out Django database/table backup commands
  Finish user API doc
  Dressing: dark grey + lake green
  feel sorry for myself since new year
  This is a side project idea: HOW to combine markdown with bullet journal
 Markdown can fulfill the basic note function for bullet journal but how to make the interface more attractive and easy understandable How to make bullet journal a GTD tool, with a small timer Adding a function to select emoji may help to make the journal more fun    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/journal/2020-01-26-journal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/journal/2020-01-26-journal/</guid>
      <description>H3 geocoding system   H3 merit
 document radius query (Uber expert) fast speed (2.6ms per iteration) enough functions for geospatial analysis Hexagon shape    more reference
 complete system need to try H3(input, output) with one day data. And also check with geojson method reference 1 reference 2    basic research on trajectory prediciton
 1 paper about aircraft prediction with basic also.    working on radiation attenuation metric script</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/journal/random/relationship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/journal/random/relationship/</guid>
      <description>想法不同：
 过程和感受（女），结果导向（男） 理解文字中的情绪（安慰、鼓励） 需要情绪传递（让人觉得你懂她）  爱情的核心：
 互相吸引（阳光、自信、有规划、带领） 懂一个人最重要（get 到感受）  相处的模式：
 情绪价值的交换 80%由男性引导  价值：
  硬：经济
  软：情商、沟通能力
  原生家庭：
 父方：做法榜样 母方：情感、情绪的觉察能力  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/personal_brand/coding_skill_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/personal_brand/coding_skill_up/</guid>
      <description>StackExchange.com上有两个贴子（贴子一，贴子二），贴子名叫“What is the single most effective thing you did to improve your programming skills?” – 对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经验排的）
和比自己聪明的能力比自己强的人工作。学习他们的代码，他们的做事方法，看一看那些人是怎么处理错误的。 总是倾听别人怎么说，无论那个的资历和职位是什么样的。 实践，实践，实践，总是不满意于一开始出来的事。 多问问自己，现在在写什么代码？为什么要这样写成这样？还有没有更好的方法？ 学习多样的技术，多多比较他们，并一定要了解各种技术的优缺点。 总是问别人问好的问题。 多回头看看走过的路，做过的事，写过的程序，感觉一他们有多烂。 多读读那些大师写的书。 不要总坐在电脑前编程序，多做做运动，多到户外走走，和非技术人多接触，向他们学习。 把你的想法说出去，看看别人怎么回应的。从别人的回应中学习。 除了这些，下面是我个人想给你的建议——
可能只能算精神，不能算方法。我以前也写过《五个方法成为更好的程序员》，《十条不错的编程观点》，还有《优秀程序员的十个习惯》这几篇文章也能给你一些启发。
热情。对编程充满热情。这种热情会导致强烈地专研精神，和努力的精神。专研精神相当重要，它是畏难情绪的天敌。 知道。学习技术要“知其道，明其理”，而不仅仅只是了解知识。举例，为什么C++有“初始化例表”而Java却没有？为什么Java的没有多重继承？为会有了TCP还要UDP？对于一个事物，什么是好的，什么是不好的。不但要了解其表面，还要了解其思想。只有了解原始的初衷和目的，你才能真正“知道”。 犯错。不犯错误永远没有经验，从自己的错误和别人的错误中学习，只有自己犯了错，才会真正明白。犯错不可怕，可怕的是不会总结只有真正的摸爬滚打过的人才是强人。技能和经验总是用错误去换来的。 回顾。要多去回顾过去，看看历史上发生过的事。这样你才能明白事物的发展规律，从面才能了解未来的路。举例：单机 -&amp;gt; Client/Server -&amp;gt; 中间应用层 -&amp;gt; 多层结构 -&amp;gt; 分布式结构。 C -&amp;gt; C++ -&amp;gt; Java，等等，等等。未来其实就在回顾过去之中。 质疑。质疑精神很重要。质疑通常会导致不同意见甚至反对意见。也许你会质疑错，也许你会被质疑，但是你的认知也会因为不同的观点而变得完整。有所同有所不同（“同”为同意及相同），观点因为不同才能迸发出火花，事物也此而发展，世界因为不同而精彩。下</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/personal_brand/freelancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/personal_brand/freelancer/</guid>
      <description> 自由接单的渠道来源  Upwork, Elance   信用和个人品牌的建立 从完全自由到固定远程工作的模式转换  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/airflow_knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/airflow_knowledge/</guid>
      <description>Airflow Basic concept  DAGs: 1) Sensor 2) Operator  Main components  Scheduler plans the execution of jobs based on a trigger or schedule. Work queue is used by Scheduler to deliver tasks that need to be run to the Workers. Worker(ECRs) executes the operation defined in each DAG. Usually, a Worker pull its task from Work queue when it is ready to process a task. When it completes the execution of the task, it will attempt to process more work from the Work queue until no task exists.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/commit/</guid>
      <description>Usually, a simple commit includes 2 parts:
{Type}: {Body}
Type:
 feat: Add new features fix: Fix bugs docs: Edit documentation style: Edit the style, no effect on code refactor: Just refactor, no new feature and bug fixing test: Add unit test code core: Update the core settings, like packages or some settings pref: Improve the performance  Body: The detail information of the commit</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/data_lake_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/data_lake_structure/</guid>
      <description>Data Lake Structure Data Lake features  数据接入:  Store data Create meta info for the data file Provide a method to access the data. For instance, API or port(?).   Data storage Data search Data management:  Create meta info Create tag of data(?) and classify the data. Create data index(?) Create relation between different types of data Track the timeline of data(?)   Data quality  Validate the completeness of data Monitor the data process procedure &amp;ndash;&amp;gt; Apache Airflow / Zabbix   Safety monitor: Monitor the usage of data, knowing the user and usage(what operation has been done), and hide sensitive info in data.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/data_lake_vs_data_warehouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/data_lake_vs_data_warehouse/</guid>
      <description>Data Lake vs Data Warehouse    Features Data Lake Data Warehouse     data structure raw processed   purpose Not yet determined For specific usage   User Data scienctist Business professionals   Accessibility Highly accessible and quick to update More complicateds and costly to make changes    Data Lake Structure A data lake is a repository of information in its “raw” format, meaning the format in which it existed when it was first collected and added to the storage pool.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/database_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/database_structure/</guid>
      <description>数据库架构 如何设计数据库，使用什么类型的数据库，就是一个架构师必须了解的。所有的数据库的共同点都是以某种方式存储数据，以某种接口来访问存储的数据。
常用概念  水平分割（横打散） 垂直分割（列打散） 按照某一列数据的特性（时间）去分割表格。 垂直、水平分割结合运用  架构模式 在实际项目中，很多人会把架构模式跟架构概念混为一谈，实际上他们是两个东西。 数据库架构主要分为2种：
  单库+缓存设计
  多库设计之主从读写分离。 多库架构中，又有两种比较流行的数据存储方式：集群数据库、分布式数据库。
  单库与多库的优缺点 若按架构进行开发，架构越长远，那么开发周期内需要考虑的东西越多，且初期数据量并不能够达到该架构要的负载瓶颈。 在IT创业界有句话，叫三月一版本，三年一重构，而一次重构的架构设计，就应该是考虑到三年后的数据量，还有负载、抗压能力。他人经验：单库+缓存的数据库设计也完全能够轻轻松松做到百万级，乃至于千万级的数据抗压。
架构中的注意事项  模块切割 分析常用字段 应完全避免为空设计（免NULL） 尽可能将字段定义为NOT NULL。MySQL难以优化使用了可空列的查询，它会使索引、索引统计和值更加复杂。 在表中存储可为空的字段，也是有办法不使用NULL的，可以考虑使用0，特殊值或字符串来代替它。  不同类型的数据库架构 关系型数据库 关系型数据库以数据表Table为核心来存储数据。数据是一行一行的表记录Record。表之间通过关联关系相互关联。 关系模型是表(行，列)组成的二维结构。SQL是关系型数据库的统一查询接口。
关系型数据库的架构设计，主要是要解决存储和事务。存储是要解决数据的查询问题。而事务则包含了四个特性，A（原子性）C（一致性）I（隔离性）D（持久性）。
Ref: MySql什么是数据库架构设计
谈谈数据库架构</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/deployment/</guid>
      <description>Basics about the deployment UAT(User Acceptance Testing) Before releasing an application, there is always one last test &amp;ndash; UAT(User Acceptance Testing), which is also called &amp;ldquo;end-user testing&amp;rdquo; or &amp;ldquo;final testing&amp;rdquo;.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/devops_vs_sre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/devops_vs_sre/</guid>
      <description>DevOps vs. SRE DevOps  减少组织间的谷仓效应 接受失效，使其为开发周期中的元素 逐渐改变 善于使用工具和自动化 任何事皆可被量化  SRE  开发周期中，开发团队使用相同的工具以及一起分享所有权 对于新的版本，建立一套可以量化的指标去衡量“意外”和“失效” 鼓励团队透过降低排除故障的成本来达到快速交付的目的（逐渐改变） 鼓励团队把工作自动化，把精力放在中长期的系统改善 运维仍属于工程的范畴，规范可用性、运行时间、停机时间。  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/github_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/github_tricks/</guid>
      <description>GitHub Command  git rebase [branch name] Solve the merge problem before merging the branch to an updated main branch git fetch origin []:[]  Commit </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/h3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/h3/</guid>
      <description>H3: A geospatial indexing system(or grid system) What is geocoding? The format of H3 Resolution Size Merit   complete documentation
  functions for radius query (Uber expert)
  fast speed (2.6ms per iteration)
  enough functions for geospatial analysis
  Hexagon shape
  TODO:  Finish the article.  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/micro_service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/micro_service/</guid>
      <description>Micro Service Micro service is trying to divide a large service framework into smaller services.
asdasd
 asdasd
Reference The framework of micro services The connection among services</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/multi-tenant-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/multi-tenant-database/</guid>
      <description>Multi-tenant DB Everyone is always talking about developing a SaaS app. The basis for SaaS is a Multi-tenancy architecture that allows multiple tenants (organizations) access to multiple instances of the software hosted on a single server. The tenants of the software share the server resources and memory.
Designing a database structure that can accommodate this type of design depends on several factors among them:
● Security
● Client data isolation</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/solid_knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/solid_knowledge/</guid>
      <description>S.O.L.I.D  S: Single responsibility principle. A class has and can have only one factor that makes it change, meaning that a class should have only a single responsibility. O: Open-close principle. Objects or entities should be open for extension but closed for modification. L: Liskov Substitution Principle. I: Interface Segregation Principle. D: Dependency Inversion Principle.  REF:  SOLID EN SOLID CN  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/posts/tech_knowledge/web_service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/tech_knowledge/web_service/</guid>
      <description>Web Service  SaaS &amp;ndash;&amp;gt; Software as a Service, which is one of the most popular topics among IT companies. For instance, cloud service, Office 365.
 API &amp;amp; SDK </description>
    </item>
    
  </channel>
</rss>
